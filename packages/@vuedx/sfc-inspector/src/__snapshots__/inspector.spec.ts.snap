// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@vuedx/sfc-inspector inspect() snapshot(composition.vue) 1`] = `
<script>
import { defineComponent } from 'vue'

export default defineComponent({
  props: ['foo'],
})
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "runtime": "any",
        "static": "any"
      },
      "meta": {}
    }
  ],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(derived-composition.vue) 1`] = `
<script>
import { createComponent } from 'random-vue'

export default createComponent({
  props: ['foo'],
})
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "runtime": "any",
        "static": "any"
      },
      "meta": {}
    }
  ],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(options-identifier.vue) 1`] = `
<script>
const component = {
  props: ['foo'],
}

export default component
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "runtime": "any",
        "static": "any"
      },
      "meta": {}
    }
  ],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(options-object.vue) 1`] = `
<script>
export default {
  props: ['foo'],
}
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "runtime": "any",
        "static": "any"
      },
      "meta": {}
    }
  ],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(props-array.vue) 1`] = `
<script>
export default {
  props: ['foo', 'bar'],
}
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "runtime": "any",
        "static": "any"
      },
      "meta": {}
    },
    {
      "name": "bar",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "runtime": "any",
        "static": "any"
      },
      "meta": {}
    }
  ],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(props-empty.vue) 1`] = `
<script>
export default {
  props: {},
}
</script>

<api-doc lang="json">
{
  "props": [],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(props-none.vue) 1`] = `
<script>
export default {}
</script>

<api-doc lang="json">
{
  "props": [],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(props-object.vue) 1`] = `
<script>
export default {
  props: {
    foo: String,
    bar: [String, Number],
    baz: {
      type: String,
    },
    bam: {
      type: [String, Number, Boolean],
      required: true,
    },
  },
}
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "string",
        "runtime": "string"
      },
      "meta": {}
    },
    {
      "name": "bar",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "runtime": "string|number",
        "static": "string|number"
      },
      "meta": {}
    },
    {
      "name": "baz",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "string",
        "runtime": "string"
      },
      "meta": {}
    },
    {
      "name": "bam",
      "description": "",
      "required": true,
      "default": null,
      "type": {
        "runtime": "string|number|boolean",
        "static": "string|number|boolean"
      },
      "meta": {}
    }
  ],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(typescript-composition-context-events.vue) 1`] = `
<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  props: {
    foo: String,
    bar: Number,
  },
  setup(props, context) {
    function doSomething() {
      context.emit('event1', props.foo)
    }

    return () => doSomething()
  },
})
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "string",
        "runtime": "string"
      },
      "meta": {}
    },
    {
      "name": "bar",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "number",
        "runtime": "number"
      },
      "meta": {}
    }
  ],
  "events": [
    {
      "name": "event1",
      "description": "",
      "type": {
        "static": "any"
      }
    }
  ]
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(typescript-composition-context-rest-events.vue) 1`] = `
<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  props: {
    foo: String,
    bar: Number,
  },
  setup(props, { slots, ...context }) {
    function doSomething() {
      context.emit('event1', props.foo)
    }

    return () => doSomething()
  },
})
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "string",
        "runtime": "string"
      },
      "meta": {}
    },
    {
      "name": "bar",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "number",
        "runtime": "number"
      },
      "meta": {}
    }
  ],
  "events": [
    {
      "name": "event1",
      "description": "",
      "type": {
        "static": "any"
      }
    }
  ]
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(typescript-composition-events.vue) 1`] = `
<script lang="ts">
import { defineComponent } from 'vue'

/**
 * @emits {string} event2 Emitted when something happens.
 */
export default /** @emits {number} event3 */ defineComponent({
  props: {
    foo: String,
    bar: Number,
  },
  setup(props, { emit }) {
    function doSomething() {
      emit('event1', props.foo)
    }

    return () => doSomething()
  },
})
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "string",
        "runtime": "string"
      },
      "meta": {}
    },
    {
      "name": "bar",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "number",
        "runtime": "number"
      },
      "meta": {}
    }
  ],
  "events": [
    {
      "name": "event2",
      "description": "Emitted when something happens.",
      "type": {
        "static": "string"
      }
    },
    {
      "name": "event3",
      "description": "",
      "type": {
        "static": "number"
      }
    },
    {
      "name": "event1",
      "description": "",
      "type": {
        "static": "any"
      }
    }
  ]
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(typescript-object-events.vue) 1`] = `
<script lang="ts">
/**
 * @emits {string} event2 Emitted when something happens.
 */
export default /** @emits {number} event3 */ {
  props: {
    foo: String,
    bar: Number,
  },
  methods: {
    created() {
      this.$emit('event1', this.foo)
    },
  },
  created() {
    /** Emitted when created. */
    this.$emit('event4', this.foo as { bar: string })
  },
}
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "string",
        "runtime": "string"
      },
      "meta": {}
    },
    {
      "name": "bar",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "number",
        "runtime": "number"
      },
      "meta": {}
    }
  ],
  "events": [
    {
      "name": "event2",
      "description": "Emitted when something happens.",
      "type": {
        "static": "string"
      }
    },
    {
      "name": "event3",
      "description": "",
      "type": {
        "static": "number"
      }
    },
    {
      "name": "event1",
      "description": "",
      "type": {
        "static": "any"
      }
    },
    {
      "name": "event4",
      "description": "Emitted when created.",
      "type": {
        "static": "{bar:string;}"
      }
    }
  ]
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(typescript-props-object.vue) 1`] = `
<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent({
  props: {
    foo: String,
    bar: [String, Number],
    /** Merge comments */
    /**
     * @type {{foo: string}}
     * @param {{foo: string}} foo hello world
     */
    baz: {
      type: Object,
      default: () => ({ foo: 'just do it!' }),
    },
    /**
     * It's a prop.
     * @deprecated
     */
    bam: {
      type: [String, Number, Boolean],
      required: true,
      default(props) {
        return props.foo + 5
      },
    },
    /**
     * Nope
     * @private
     */
    bak: {
      type: [String, null],
      default: 'just do it!',
    },
  },
})
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "string",
        "runtime": "string"
      },
      "meta": {}
    },
    {
      "name": "bar",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "runtime": "string|number",
        "static": "string|number"
      },
      "meta": {}
    },
    {
      "name": "baz",
      "description": "Merge comments",
      "required": false,
      "default": {
        "factory": "()=>{foo:'just do it!'}"
      },
      "type": {
        "static": "{foo:string}",
        "runtime": "object"
      },
      "meta": {}
    },
    {
      "name": "bam",
      "description": "It's a prop.",
      "required": true,
      "default": {
        "factory": "function(props){return props.foo+5;}"
      },
      "type": {
        "runtime": "string|number|boolean",
        "static": "string|number|boolean"
      },
      "meta": {
        "deprecated": true
      }
    },
    {
      "name": "bak",
      "description": "Nope",
      "required": false,
      "default": {
        "value": "'just do it!'"
      },
      "type": {
        "runtime": "string|null",
        "static": "string|null"
      },
      "meta": {
        "private": true
      }
    }
  ],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(typescript-props-type-inline.vue) 1`] = `
<script lang="ts">
import { defineComponent } from 'vue'

export default defineComponent<{
  foo: string
  bar: { foo: string; bar: number }
}>({
  props: ['foo', 'bar'],
})
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": true,
      "default": null,
      "type": {
        "runtime": "any",
        "static": "string"
      },
      "meta": {}
    },
    {
      "name": "bar",
      "description": "",
      "required": true,
      "default": null,
      "type": {
        "runtime": "any",
        "static": "{foo:string;bar:number;}"
      },
      "meta": {}
    }
  ],
  "events": []
}
</api-doc>
`;

exports[`@vuedx/sfc-inspector inspect() snapshot(typescript-render-slots.vue) 1`] = `
<script lang="ts">
/**
 * @emits @param {string} event2 Emitted when something happens.
 * @slot @param {{ data: string }} default The default slot.
 */
export default /** @emits {number} event3 */ {
  props: {
    foo: String,
    bar: Number,
  },
  methods: {
    created() {
      this.$emit('event1', this.foo)
    },
  },
  created() {
    /** Emitted when created. */
    this.$emit('event4', this.foo as { bar: string })
  },
}
</script>

<api-doc lang="json">
{
  "props": [
    {
      "name": "foo",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "string",
        "runtime": "string"
      },
      "meta": {}
    },
    {
      "name": "bar",
      "description": "",
      "required": false,
      "default": null,
      "type": {
        "static": "number",
        "runtime": "number"
      },
      "meta": {}
    }
  ],
  "events": [
    {
      "name": "event2",
      "description": "Emitted when something happens.",
      "type": {
        "static": "string"
      }
    },
    {
      "name": "event3",
      "description": "",
      "type": {
        "static": "number"
      }
    },
    {
      "name": "event1",
      "description": "",
      "type": {
        "static": "any"
      }
    },
    {
      "name": "event4",
      "description": "Emitted when created.",
      "type": {
        "static": "{bar:string;}"
      }
    }
  ]
}
</api-doc>
`;
